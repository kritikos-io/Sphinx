// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Kritikos.Sphinx.Data.Persistence.Migrations
{
    public partial class Addsbasicquestionpersistence : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "TestSession",
                columns: table => new
                {
                    Id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Title = table.Column<string>(type: "text", nullable: false),
                    AId = table.Column<long>(type: "bigint", nullable: false),
                    BId = table.Column<long>(type: "bigint", nullable: false),
                    CId = table.Column<long>(type: "bigint", nullable: false),
                    DId = table.Column<long>(type: "bigint", nullable: true),
                    EId = table.Column<long>(type: "bigint", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uuid", nullable: false),
                    UpdatedBy = table.Column<Guid>(type: "uuid", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp without time zone", nullable: false),
                    UpdatedAt = table.Column<DateTime>(type: "timestamp without time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TestSession", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TestSession_StimulusGroups_AId",
                        column: x => x.AId,
                        principalTable: "StimulusGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TestSession_StimulusGroups_BId",
                        column: x => x.BId,
                        principalTable: "StimulusGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TestSession_StimulusGroups_CId",
                        column: x => x.CId,
                        principalTable: "StimulusGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TestSession_StimulusGroups_DId",
                        column: x => x.DId,
                        principalTable: "StimulusGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TestSession_StimulusGroups_EId",
                        column: x => x.EId,
                        principalTable: "StimulusGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TestSessionQuestion",
                columns: table => new
                {
                    Id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    SessionId = table.Column<long>(type: "bigint", nullable: false),
                    UnderTestId = table.Column<long>(type: "bigint", nullable: false),
                    CorrectAnswerId = table.Column<long>(type: "bigint", nullable: false),
                    False1Id = table.Column<long>(type: "bigint", nullable: false),
                    False2Id = table.Column<long>(type: "bigint", nullable: false),
                    False3Id = table.Column<long>(type: "bigint", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uuid", nullable: false),
                    UpdatedBy = table.Column<Guid>(type: "uuid", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp without time zone", nullable: false),
                    UpdatedAt = table.Column<DateTime>(type: "timestamp without time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TestSessionQuestion", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TestSessionQuestion_Stimuli_CorrectAnswerId",
                        column: x => x.CorrectAnswerId,
                        principalTable: "Stimuli",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TestSessionQuestion_Stimuli_False1Id",
                        column: x => x.False1Id,
                        principalTable: "Stimuli",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TestSessionQuestion_Stimuli_False2Id",
                        column: x => x.False2Id,
                        principalTable: "Stimuli",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TestSessionQuestion_Stimuli_False3Id",
                        column: x => x.False3Id,
                        principalTable: "Stimuli",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TestSessionQuestion_Stimuli_UnderTestId",
                        column: x => x.UnderTestId,
                        principalTable: "Stimuli",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TestSessionQuestion_TestSession_SessionId",
                        column: x => x.SessionId,
                        principalTable: "TestSession",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "IX_TestSession_AId",
                table: "TestSession",
                column: "AId");

            migrationBuilder.CreateIndex(
                name: "IX_TestSession_BId",
                table: "TestSession",
                column: "BId");

            migrationBuilder.CreateIndex(
                name: "IX_TestSession_CId",
                table: "TestSession",
                column: "CId");

            migrationBuilder.CreateIndex(
                name: "IX_TestSession_DId",
                table: "TestSession",
                column: "DId");

            migrationBuilder.CreateIndex(
                name: "IX_TestSession_EId",
                table: "TestSession",
                column: "EId");

            migrationBuilder.CreateIndex(
                name: "IX_TestSessionQuestion_CorrectAnswerId",
                table: "TestSessionQuestion",
                column: "CorrectAnswerId");

            migrationBuilder.CreateIndex(
                name: "IX_TestSessionQuestion_False1Id",
                table: "TestSessionQuestion",
                column: "False1Id");

            migrationBuilder.CreateIndex(
                name: "IX_TestSessionQuestion_False2Id",
                table: "TestSessionQuestion",
                column: "False2Id");

            migrationBuilder.CreateIndex(
                name: "IX_TestSessionQuestion_False3Id",
                table: "TestSessionQuestion",
                column: "False3Id");

            migrationBuilder.CreateIndex(
                name: "IX_TestSessionQuestion_SessionId",
                table: "TestSessionQuestion",
                column: "SessionId");

            migrationBuilder.CreateIndex(
                name: "IX_TestSessionQuestion_UnderTestId",
                table: "TestSessionQuestion",
                column: "UnderTestId");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "TestSessionQuestion");

            migrationBuilder.DropTable(
                name: "TestSession");
        }
    }
}
