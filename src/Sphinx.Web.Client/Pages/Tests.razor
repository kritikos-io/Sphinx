@page "/tests"
@using Kritikos.Sphinx.Web.Shared.API
@using System.Threading.Tasks;
@using Kritikos.Sphinx.Web.Shared;
@using Kritikos.Sphinx.Web.Shared.RetrieveDto;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using Microsoft.AspNetCore.Authorization
@using Kritikos.Sphinx.Web.Shared.Criteria;

@attribute [Authorize]
@inject ISphinxApi Api

<h1>Test Sessions</h1>

@if (testSessions == null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else
{
  <table class="tests-table">
    <thead>
      <tr>
        <th>Test Session Id</th>
        <th>Navigate</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var testSession in testSessions.Results)
      {
        <tr>
          <td>@testSession.Id</td>
          <td><a href="@($"testsession/{testSession.Id}")" class="btn btn-primary m-1"> > </a></td>
        </tr>
      }
    </tbody>
  </table>

  <div class="pagination">
    <button class="btn btn-sm btn-primary" @onclick="@(async () => await ChangePage(currentPage - 1))">Previous</button>
    <button class="btn btn-sm btn-primary" @onclick="@(async () => await ChangePage(currentPage + 1))">Next</button>
  </div>
}

@code{
    private PagedResult<TestSessionRetrieveDto>? testSessions;
    private int currentPage = 1;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
      await Refresh();
    }

    private async Task Refresh()
    {
      try
      {
        testSessions = await Api.GetTestSessions(new PaginationCriteria() { Page = currentPage });
        totalPages = testSessions.TotalPages;
      }
      catch (AccessTokenNotAvailableException exception)
      {
        exception.Redirect();
      }
    }

    private async Task ChangePage(int pageIndex)
    {
      if (pageIndex > totalPages)
        currentPage = totalPages;
      else if (pageIndex < 0)
        currentPage = 1;
      else currentPage = pageIndex;

      await Refresh();
    }
}
